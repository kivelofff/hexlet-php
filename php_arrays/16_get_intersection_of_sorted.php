<?php
/*src\Arrays.php
Реализуйте функцию getIntersectionOfSortedArray, которая принимает на вход два отсортированных массива и находит их пересечение.

Примеры
<?php

getIntersectionOfSortedArray([10, 11, 24], [10, 13, 14, 18, 24, 30]); // [10, 24]

getIntersectionOfSortedArray([10, 11, 24], [-2, 3, 4]); // []

getIntersectionOfSortedArray([], [2]); // []
Алгоритм
Поиск пересечения двух неотсортированных массивов — операция, в рамках которой выполняется вложенный цикл с полной проверкой каждого элемента первого массива на вхождение во второй.

Сложность данного алгоритма O(n * m) (произведение n и m), где n и m — размерности массивов. Если массивы отсортированы, то можно реализовать алгоритм, сложность которого уже O(n + m), что значительно лучше.

Суть алгоритма довольно проста. В коде вводятся два указателя (индекса) на каждый из массивов. Начальное значение каждого указателя 0. Затем идёт проверка элементов, находящихся под этими индексами в обоих массивах. Если они совпадают, то значение заносится в результирующий массив, а оба индекса инкрементируются. Если значение в первом массиве больше, чем во втором, то инкрементируется указатель второго массива, иначе — первого.*/

var_dump(getIntersectionOfSortedArray([10, 11, 24], [10, 13, 14, 18, 24, 30])); // [10, 24]

var_dump(getIntersectionOfSortedArray([10, 11, 24], [-2, 3, 4])); // []

var_dump(getIntersectionOfSortedArray([], [2])); // []

var_dump(getIntersectionOfSortedArray([10, 11, 24], [10, 13, 14, 18, 25, 30]));

function getIntersectionOfSortedArray(array $arr1, array $arr2): array
{
    $i = 0;
    $j = 0;
    $intersection = [];
    while ($i < count($arr1) && $j < count($arr2)) {
        $val1 = $arr1[$i];
        $val2 = $arr2[$j];
        if ($val1 == $val2) {
            $intersection[] = $val1;
            $i++;
            $j++;
        } elseif ($val1 < $val2) {
            $i++;
        } else {
            $j++;
        }
    }
    return $intersection;
}